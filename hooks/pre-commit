#!/usr/bin/env python3

from pathlib import Path
import subprocess
import yaml
import sys
import re
import os

def run_command(command, capture_output=False, check=True, text=True):
    """Utility function to run a shell command."""
    return subprocess.run(command, capture_output=capture_output, check=check, text=text, shell=True)

def cleanup(error_occurred):
    """Cleans up by popping or dropping the stash based on whether an error occurred."""
    if error_occurred:
        print("something went wrong, falling back to stashed changes...")
        run_command("git stash pop -q")
    else:
        print("cleaning up...")
        run_command("git stash drop -q")

def matches_pattern(file, filename_pattern, path_pattern):
    """Checks if the file matches the given patterns."""
    return (filename_pattern and re.search(filename_pattern, file)) or (path_pattern and re.search(path_pattern, file))

def read_sops_config():
    config_path, paths, data=os.environ.get("SOPS_CONFIG_PATH"), set(), dict()

    if not config_path:
        return paths

    with open(config_path, 'r') as file:
        data = yaml.safe_load(file)

    yamls = [file for file in [ *(Path('.').rglob('*.yml')), *(Path('.').rglob('*.yaml'))] if os.path.isfile(file)]

    if "creation_rules" in data:
        data=data["creation_rules"]
        for item in data:
            path_regex = item.get("path_regex", "")
            filename_regex = item.get("filename_regex", "")
            for path in yamls:
                if matches_pattern(str(path), filename_regex, path_regex):
                    paths.add(str(path))

    return paths

def file_is_encrypted(file_path):
    with open(file_path, 'r') as file:
        data = yaml.safe_load(file)
    return 'sops' in data

try:
    # Temporary stash to hold the current state without the staged changes
    print("stashing changes")
    run_command("git stash save -q --keep-index")

    # Get the list of staged files (ACM - Added, Copied, Modified)
    result = run_command("git diff --cached --name-only --diff-filter=ACM", capture_output=True)
    files = result.stdout.strip().split('\n')

    # Filter the files based on the pattern
    pattern = r'\.(yaml|yml)$'
    exclude_pattern = r'\.sops\.y(a)?ml$'    
    specific_patterns = read_sops_config()
    files_to_process = [f for f in files if re.search(pattern, f) and not re.search(exclude_pattern, f) and any(matches_pattern(f, p, p) for p in specific_patterns)]

    # Encrypt and replace each staged file
    for file in files_to_process:
        if file_is_encrypted(file):
            print(f"skipping file:{file}, already encrypted")
            continue
        print(f"encrypting file: {file}")
        result = run_command(f"sops -e -i {file}", check=False) 
        if result.returncode != 0:
            raise Exception(f"Encryption failed: {file}")
        run_command(f"git add {file}")

except Exception as e:
    print(f"Error: {e}")
    cleanup(True)
    sys.exit(1)

cleanup(False)